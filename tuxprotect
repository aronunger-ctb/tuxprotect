#!/bin/bash
# Add logging functions at the top
LOG_DIR="/var/log/tuxprotect"
VPN_LOG="$LOG_DIR/vpn.log"
MAIN_LOG="$LOG_DIR/tuxprotect.log"
last_route=""

log() {
    local level="$1"
    local message="$2"
    local log_file="$3"
    local timestamp="[$(date '+%Y-%m-%d %H:%M:%S')]"
    local log_message="$timestamp [$level] $message"
    
    echo "$log_message" >> "$log_file"
    [ "$4" = "verbose" ] && echo "$log_message"
}

main_log() {
    log "INFO" "$1" "$MAIN_LOG" "$2"
}

vpn_log() {
    log "VPN" "$1" "$VPN_LOG" "$2"
    main_log "$1" "$2"
}

rotate_logs() {
    for logfile in "$LOG_DIR"/*.log; do
        if [ -f "$logfile" ] && [ $(stat -f%z "$logfile") -gt 10485760 ]; then # 10MB
            mv "$logfile" "$logfile.old"
            touch "$logfile"
        fi
    done
}

verify_vpn_config() {
    local config="/usr/share/tuxprotect/vpn/netfree.ovpn"

    if [ ! -f "$config" ] || [ ! -s "$config" ]; then
        vpn_log "ERROR: VPN configuration missing or empty"
        return
    fi

    # Check for required config elements
    if ! grep -q "^remote " "$config" && ! grep -q "^auth-user-pass" "$config"; then
        vpn_log "ERROR: VPN configuration invalid"
        return 1
    fi

    return 0
}

start_vpn() {
    vpn_log "Starting VPN connection..."

    if ! verify_vpn_config; then
        vpn_log "Failed to verify VPN configuration"
        return 1
    fi

    if ! pgrep openvpn >/dev/null; then
        killall openvpn 2>/dev/null
        sleep 2

        openvpn --config /usr/share/tuxprotect/vpn/netfree.ovpn \
                --log "$VPN_LOG" \
                --daemon

        sleep 5

        # Verify VPN connection
        if ip addr show tun0 >/dev/null 2>&1; then
            vpn_ip=$(ip addr show tun0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
            if [ "$vpn_ip" = "100.77.1.59" ]; then
                vpn_log "VPN connected successfully with correct IP"
                return 0
            fi
        fi

        vpn_log "Failed to establish VPN connection"
        return 1
    fi
    return 0
}

check_vpn() {
    # Set a timeout for the curl request (e.g., 10 seconds)
    netfree=$(curl -sk --max-time 1 https://api.internal.netfree.link/user/info)
    # Check if "isNetFree":true exists in the response
    if [[ "$netfree" == *'"isNetFree":true'* ]]; then
        main_log "NetFree is active: $netfree"
        iptables -F  # Flush all rules
        iptables -P INPUT ACCEPT
        iptables -P OUTPUT ACCEPT
        iptables -P FORWARD ACCEPT
        main_log "Allowing all traffic"

        # Check if the IP route table has changed
        current_route=$(ip route show)
       :' if [[ "$current_route" != "$last_route" ]]; then
            

            # New code to ensure all traffic is routed through the VPN
            VPN_IF=$(ip -o link show | awk -F': ' '/tun[0-9]/ {print $2; exit}')
            VPN_SERVER=$  # Your VPN server's IP
            VPN_GW=$(ip route show dev $VPN_IF | awk '/via/ {print $3; exit}')
            DEFAULT_IF=$(ip route show default | awk '{print $5; exit}')
            DEFAULT_GW=$(ip route show default | awk '{print $3; exit}')

            if [[ -z "$VPN_GW" ]]; then
                main_log "[!] Could not detect VPN gateway. Exiting."
                exit 1
            fi

            main_log "[+] VPN detected on $VPN_IF (Gateway: $VPN_GW)"
            main_log "[+] Default Interface: $DEFAULT_IF"
            main_log "[+] Default Gateway: $DEFAULT_GW"

            # Preserve the route to the VPN server
            main_log "[+] Ensuring VPN server ($VPN_SERVER) is still reachable..."
            ip route add $VPN_SERVER via $DEFAULT_GW dev $DEFAULT_IF

            # Remove all old default routes to prevent leaks
            main_log "[+] Removing old default gateway ($DEFAULT_GW)..."
            ip route del default via $DEFAULT_GW dev $DEFAULT_IF

            # Add a new default route through VPN
            main_log "[+] Forcing all traffic through VPN ($VPN_GW)..."
            ip route add default via $VPN_GW dev $VPN_IF

            # Disable IPv6 to prevent leaks
            main_log "[+] Disabling IPv6 to prevent leaks..."
            sysctl -w net.ipv6.conf.all.disable_ipv6=1 > /dev/null
            sysctl -w net.ipv6.conf.default.disable_ipv6=1 > /dev/null

            main_log "[+] Done! Checking new routing table:"
            last_route=$(ip route show)
        fi'
    else
        main_log "NetFree is not active or an error occurred: $netfree"
        main_log "Not Connected to NetFree"
        block_internet
        netfree_try_again=$(curl -sk --max-time 10 https://api.internal.netfree.link/user/info)
        if [[ "$netfree_try_again" == *'"isNetFree":true'* ]]; then
            main_log "NetFree is active: $netfree"
            iptables -F  # Flush all rules
            iptables -P INPUT ACCEPT
            iptables -P OUTPUT ACCEPT
            iptables -P FORWARD ACCEPT
            main_log "Allowing all traffic"
        else
            killall openvpn
            start_vpn
        fi
        
    fi

    install_if_not_present curl
    install_if_not_present iptables
    install_if_not_present openssl
    install_if_not_present jq
    install_if_not_present openvpn

    # Rotate logs if needed
    rotate_logs
}

block_vbox_briged_adapters() {
    local_user=$(who | awk '{print $1}' | head -n 1)
    export LOGNAME=$local_user
    export USER=$local_user
    
    while true; do
        # Get a list of all VMs (names and UUIDs)
       #log "($local_user)"


        vms=$(sudo -u $local_user VBoxManage list vms)
        #log "vm ($vms) s"

        # Loop through each VM entry
        while IFS= read -r vm; do
            # Skip empty or invalid lines
            if [[ -z $vm || $vm =~ ^[[:space:]]*$ ]]; then
                log "Skipping empty or invalid VM entry"
                continue
            fi

            # Extract VM name and UUID using regex
            vm_name=$(echo "$vm" | grep -oP '^"\K[^"]+(?=")')
            vm_uuid=$(echo "$vm" | grep -oP '{\K[^}]+(?=})')

            # Skip if either name or UUID is missing
            if [[ -z $vm_name || -z $vm_uuid ]]; then
                log "Error processing VM entry (missing name or UUID): $vm"
                continue
            fi

            #log "Checking VM: $vm_name ($vm_uuid)"

            # Check network adapters for bridged mode
            for adapter in {1..4}; do
                nic_type=$(sudo -u $local_user VBoxManage showvminfo "$vm_uuid" --machinereadable | grep "nic$adapter" | cut -d'=' -f2 | tr -d '"')

                if [[ $nic_type == "bridged" ]]; then
                    #log "VM '$vm_name' ($vm_uuid) is using a bridged network on adapter $adapter."

                    # Stop the VM if it is running
                    vm_state=$(sudo -u $local_user VBoxManage showvminfo "$vm_uuid" --machinereadable | grep -E '^VMState=' | cut -d'=' -f2 | tr -d '"')
                    if [[ $vm_state == "running" ]]; then
                        log "Stopping VM: $vm_name"
                        sudo -u $local_user VBoxManage controlvm "$vm_uuid" poweroff
                    fi

                    # Break out of adapter loop as we only need one bridged network to stop
                    break
                fi
            done
        done <<< "$vms"

        sleep 5  # Check every 60 seconds
    done
}


trap 'start_service; exit' SIGINT SIGTERM
start_service () {
	rewrite_service
	systemctl daemon-reload
	systemctl reenable tuxprotect.service
	systemctl start tuxprotect.service
}

rewrite_service() {
    chattr -i /etc/systemd/system/tuxprotect.service
    cat > /etc/systemd/system/tuxprotect.service << EOL
[Unit]
Description=Tux Protect
[Service]
Type=simple
ExecStartPre=-/usr/sbin/iptables -F
ExecStartPre=-/usr/bin/chattr -i /usr/bin/tuxprotect
ExecStartPre=-/usr/bin/curl -o /usr/bin/tuxprotect -s --connect-timeout 5 -m 5 -k https://raw.githubusercontent.com/aronunger-ctb/tuxprotect/main/tuxprotect
ExecStartPre=-/usr/bin/chmod +x /usr/bin/tuxprotect
ExecStartPre=-/usr/bin/chattr +i /usr/bin/tuxprotect
ExecStart=/usr/bin/tuxprotect
ExecStopPost=-/usr/bin/chattr -i /etc/systemd/system/tuxprotect.service
ExecStopPost=-/usr/bin/curl -o /etc/systemd/system/tuxprotect.service -s --connect-timeout 5 -m 5 -k https://raw.githubusercontent/aronunger-ctb/tuxprotect/main/tuxprotect.service
ExecStopPost=-/usr/bin/chattr -+ /etc/systemd/system/tuxprotect.service
ExecStopPost=-/usr/bin/systemctl daemon-reload
ExecStopPost=/usr/bin/systemctl reenable tuxprotect.service
ExecStopPost=/usr/bin/systemctl start tuxprotect.service
TimeoutStopSec=5s
Restart=always
RestartSec=1
StartLimitInterval=0
StartLimitBurst=0
Environment=DISPLAY=:0
[Install]
WantedBy=multi-user.target
EOL
    chattr +i /etc/systemd/system/tuxprotect.service
}
rewrite_script() {
	chattr -i /usr/bin/tuxprotect
	cat $0 > "$temp_file"
	cp $temp_file /usr/bin/tuxprotect
	rm "$temp_file"
	chmod +x /usr/bin/tuxprotect
	chattr +i /usr/bin/tuxprotect
}
#var
version="1.0.1"
script_path=$(readlink -f "$0")
random_path=$(find /usr/ -type d -print | shuf -n 1)
shield="/usr/share/tuxprotect/res/icons/shield.png"
shieldb="/usr/share/tuxprotect/res/icons/shieldb.png"
shieldc="/usr/share/tuxprotect/res/icons/shieldc.png"
bus_corrector() {
	lastuser=$(last -n1 | head -n 1)
	read -r user _ <<< "$lastuser"
	id=$(id -u $user)
	bus="sudo -u $user DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$id/bus"
}
unlock_dpkg() {
    rm /var/lib/dpkg/lock-frontend
	rm /var/lib/apt/lists/lock
	rm /var/cache/apt/archives/lock
	rm /var/lib/dpkg/lock
}
install_if_not_present() {
    local package=$1
    if ! command -v $package &> /dev/null; then
        if ! apt-get install $package; then
            unlock_dpkg
            apt-get install $package
        fi
    fi
}
indicator() {
	#menu language
	if [ "$LANG" = "fr_FR.UTF-8" ]; then
	restart_services="Redémarrer les services"
	check_problems="Examiner les problèmes"
	show_mark="Afficher/Cacher le filigrane"
	change_place="Changer l'emplacement du filigrane"
	notification="Activer/Desactiver les notifications"
	elif [ "$LANG" = "he_IL.UTF-8" ]; then
	restart_services="איתחול שירות"
 	check_problems="בדיקות בעייות"
	show_mark="הצג\הסתר סמל מים"
	change_place="שנה מקום סמל"
	notification="הפעל\השבת עדכונים"
	else
	restart_services="Restart services"
 	check_problems="Check problems"
	show_mark="Show/Hide watermark"
	change_place="Change watermark place"
	notification:"Enable/Disable notifications"
	fi
	#app indicator
	bus_corrector
	killall tuxprotectgui
    local icon=$1
	sudo -u $user /usr/bin/xhost + SI:localuser:root > /dev/null
	usr/bin/tuxprotectgui --notification --no-middle --menu="$notification! /usr/share/tuxprotect/notification
	|$restart_services ! /usr/share/tuxprotect/restartservices &
	|$check_problems ! $bus /usr/bin/xdg-open http://1.2.3.4
	|V$version " --listen --image="$icon"
	sudo -u $first /usr/bin/xhost - SI:localuser:root > /dev/null
}
notification() {
	status_path="/usr/share/tuxprotect/res/status"
	status=$(cat /usr/share/tuxprotect/res/status)
	bus_corrector
	local icon=$1
	local content=$2
	if [ "$status" = "1" ]; then
	$bus notify-send "Tux Protect" $content -i "$icon" -t 20
	fi
}
block_internet() {
    vpn_log "Internet blocked"
    iptables -F          # Flush all existing rules
    iptables -X          # Delete user-defined chains
    iptables -P INPUT DROP   # Default policy for INPUT is DROP
    iptables -P OUTPUT DROP  # Default policy for OUTPUT is DROP
    iptables -P FORWARD DROP # Default policy for FORWARD is DROP

    # Allow loopback traffic
    iptables -A INPUT -i lo -j ACCEPT
    iptables -A OUTPUT -o lo -j ACCEPT

    # Allow established and related connections (CRUCIAL, place early)
    iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
    iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

    # Allow outgoing DNS requests (Important for resolving VPN server address)
    iptables -A OUTPUT -p udp --dport 53 -j ACCEPT
    iptables -A OUTPUT -p tcp --dport 53 -j ACCEPT
    iptables -A INPUT -p udp --sport 53 -j ACCEPT
    iptables -A INPUT -p tcp --sport 53 -j ACCEPT
    iptables -A INPUT -s 8.8.8.8 -j ACCEPT
    iptables -A OUTPUT -d 8.8.8.8 -j ACCEPT
    iptables -A INPUT -s 8.8.4.4 -j ACCEPT
    iptables -A OUTPUT -d 8.8.4.4 -j ACCEPT

    # Allow traffic to/from your trusted IP (e.g., for SSH access)
    iptables -A INPUT -s 100.77.0.190 -j ACCEPT
    iptables -A OUTPUT -d 100.77.0.190 -j ACCEPT

    # Allow traffic to/from your VPN server and netfree api (for reconnection attempts)
    # us server
    NETFREE_US_VPN_SERVER=$(dig +short vpn-us-nyc1.netfree.link)
    for ip in $NETFREE_US_VPN_SERVER; do
        iptables -A INPUT -s $ip -j ACCEPT
        iptables -A OUTPUT -d $ip  -j ACCEPT
        main_log $ip
    done
    # uk server
    NETFREE_UK_VPN_SERVER=$(dig +short s.uk1.nfaw.netfree.link)
    for ip in $NETFREE_Uk_VPN_SERVER; do
        iptables -A INPUT -s $ip -j ACCEPT
        iptables -A OUTPUT -d $ip  -j ACCEPT
        main_log $ip
    done
    # isreal server
    NETFREE_IL_VPN_SERVER=$(dig +short s.il1.nfaw.netfree.link)
    for ip in $NETFREE_IL_VPN_SERVER; do
        iptables -A INPUT -s $ip -j ACCEPT
        iptables -A OUTPUT -d $ip  -j ACCEPT
        main_log $ip
    done
    # france server
    NETFREE_Fr_VPN_SERVER=$(dig +short vpn-fr1.netfree.link)
    for ip in $NETFREE_FR_VPN_SERVER; do
        iptables -A INPUT -s $ip -j ACCEPT
        iptables -A OUTPUT -d $ip  -j ACCEPT
        main_log $ip
    done
    # netfree api
    NETFREE_API=$(dig +short https://api.internal.netfree.link)
    for ip in $NETFREE_API; do
        iptables -A INPUT -s $ip -j ACCEPT
        iptables -A OUTPUT -d $ip -j ACCEPT
        main_log $ip
    done
    
    

    # Allow traffic from your local networks.
    iptables -A INPUT -s 192.168.0.0/16 -j ACCEPT
    iptables -A INPUT -s 127.16.0.0/12 -j ACCEPT
    iptables -A INPUT -s 10.0.0.0/8 -j ACCEPT
    iptables -A INPUT -s 1.2.3.4 -j ACCEPT
    iptables -A INPUT -s 51.89.182.69 -j ACCEPT
    iptables -A INPUT -s 93.184.216.34 -j ACCEPT

    # Reject/Drop everything else (this is now effective)
    iptables -A INPUT -j REJECT
    iptables -A OUTPUT -j REJECT
    iptables -L -v -n 2>&1 | while IFS= read -r line; do
        vpn_log "$line"
    done
}

disable_ipv6() {
    main_log "Disabling IPv6"
    sysctl -w net.ipv6.conf.all.disable_ipv6=1
    sysctl -w net.ipv6.conf.default.disable_ipv6=1
    sysctl -w net.ipv6.conf.lo.disable_ipv6=1
}
main () {
    main_log "Starting Tux Protect service" "verbose"

    # Disable IPv6

    # Verify VPN config before starting service
    if ! verify_vpn_config; then
        main_log "ERROR: Invalid VPN configuration - please run install script again" "verbose"
        exit 1
    fi

   
    block_internet
    disable_ipv6



    if ! start_vpn; then
        main_log "Initial VPN start failed - will retry" "verbose"
    fi

    indicator $shieldc &
    block_vbox_briged_adapters &

    while true; do
        check_vpn
        
    done
}
main



